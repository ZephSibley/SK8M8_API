// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sk8M8_API.Models;

namespace Sk8M8_API.Migrations
{
    [DbContext(typeof(SkateContext))]
    [Migration("20200517160002_YetMoreLocationTypes")]
    partial class YetMoreLocationTypes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Sk8M8_API.Models.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<Point>("Geolocation")
                        .HasColumnType("geometry");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Geolocation");

                    b.HasIndex("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Sk8M8_API.Models.ClientLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IPAddress")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientLogin");
                });

            modelBuilder.Entity("Sk8M8_API.Models.ClientMarker", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("MapMarkerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MapMarkerId");

                    b.HasIndex("UserId");

                    b.ToTable("ClientMarker");
                });

            modelBuilder.Entity("Sk8M8_API.Models.ClientMarkerStar", b =>
                {
                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<long>("MapMarkerId")
                        .HasColumnType("bigint");

                    b.HasKey("ClientId", "MapMarkerId");

                    b.HasIndex("MapMarkerId");

                    b.ToTable("ClientMarkerStar");
                });

            modelBuilder.Entity("Sk8M8_API.Models.LocationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LocationType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateCreated = new DateTime(2020, 5, 17, 17, 0, 2, 487, DateTimeKind.Local).AddTicks(6720),
                            DateUpdated = new DateTime(2020, 5, 17, 17, 0, 2, 489, DateTimeKind.Local).AddTicks(4559),
                            Name = "SkatePark"
                        },
                        new
                        {
                            Id = 2L,
                            DateCreated = new DateTime(2020, 5, 17, 17, 0, 2, 489, DateTimeKind.Local).AddTicks(5436),
                            DateUpdated = new DateTime(2020, 5, 17, 17, 0, 2, 489, DateTimeKind.Local).AddTicks(5445),
                            Name = "Rail"
                        },
                        new
                        {
                            Id = 3L,
                            DateCreated = new DateTime(2020, 5, 17, 17, 0, 2, 489, DateTimeKind.Local).AddTicks(5459),
                            DateUpdated = new DateTime(2020, 5, 17, 17, 0, 2, 489, DateTimeKind.Local).AddTicks(5462),
                            Name = "Ramp"
                        },
                        new
                        {
                            Id = 4L,
                            DateCreated = new DateTime(2020, 5, 17, 17, 0, 2, 489, DateTimeKind.Local).AddTicks(5465),
                            DateUpdated = new DateTime(2020, 5, 17, 17, 0, 2, 489, DateTimeKind.Local).AddTicks(5467),
                            Name = "Plaza"
                        },
                        new
                        {
                            Id = 5L,
                            DateCreated = new DateTime(2020, 5, 17, 17, 0, 2, 489, DateTimeKind.Local).AddTicks(5470),
                            DateUpdated = new DateTime(2020, 5, 17, 17, 0, 2, 489, DateTimeKind.Local).AddTicks(5473),
                            Name = "Pump track"
                        },
                        new
                        {
                            Id = 6L,
                            DateCreated = new DateTime(2020, 5, 17, 17, 0, 2, 489, DateTimeKind.Local).AddTicks(5476),
                            DateUpdated = new DateTime(2020, 5, 17, 17, 0, 2, 489, DateTimeKind.Local).AddTicks(5479),
                            Name = "Dirt track"
                        },
                        new
                        {
                            Id = 7L,
                            DateCreated = new DateTime(2020, 5, 17, 17, 0, 2, 489, DateTimeKind.Local).AddTicks(5482),
                            DateUpdated = new DateTime(2020, 5, 17, 17, 0, 2, 489, DateTimeKind.Local).AddTicks(5484),
                            Name = "Skate path"
                        },
                        new
                        {
                            Id = 8L,
                            DateCreated = new DateTime(2020, 5, 17, 17, 0, 2, 489, DateTimeKind.Local).AddTicks(5536),
                            DateUpdated = new DateTime(2020, 5, 17, 17, 0, 2, 489, DateTimeKind.Local).AddTicks(5539),
                            Name = "Ledge"
                        },
                        new
                        {
                            Id = 9L,
                            DateCreated = new DateTime(2020, 5, 17, 17, 0, 2, 489, DateTimeKind.Local).AddTicks(5543),
                            DateUpdated = new DateTime(2020, 5, 17, 17, 0, 2, 489, DateTimeKind.Local).AddTicks(5545),
                            Name = "Stairset"
                        },
                        new
                        {
                            Id = 10L,
                            DateCreated = new DateTime(2020, 5, 17, 17, 0, 2, 489, DateTimeKind.Local).AddTicks(5548),
                            DateUpdated = new DateTime(2020, 5, 17, 17, 0, 2, 489, DateTimeKind.Local).AddTicks(5551),
                            Name = "Manny Pad"
                        });
                });

            modelBuilder.Entity("Sk8M8_API.Models.MapMarker", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LocationCategory")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Point>("Point")
                        .HasColumnType("geometry");

                    b.Property<long?>("VideoId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("Point");

                    b.HasIndex("VideoId");

                    b.ToTable("MapMarker");
                });

            modelBuilder.Entity("Sk8M8_API.Models.MarkerCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LocationTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MapMarkerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LocationTypeId");

                    b.HasIndex("MapMarkerId");

                    b.ToTable("MarkerCategory");
                });

            modelBuilder.Entity("Sk8M8_API.Models.Media", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Filename")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("Sk8M8_API.Models.MediaRating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("MediaId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("MediaId");

                    b.ToTable("MediaRating");
                });

            modelBuilder.Entity("Sk8M8_API.Models.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Sk8M8_API.Models.UserPermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("PermissionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("PermissionId");

                    b.ToTable("UserPermission");
                });

            modelBuilder.Entity("Sk8M8_API.Models.ClientLogin", b =>
                {
                    b.HasOne("Sk8M8_API.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("Sk8M8_API.Models.ClientMarker", b =>
                {
                    b.HasOne("Sk8M8_API.Models.MapMarker", "MapMarker")
                        .WithMany()
                        .HasForeignKey("MapMarkerId");

                    b.HasOne("Sk8M8_API.Models.Client", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Sk8M8_API.Models.ClientMarkerStar", b =>
                {
                    b.HasOne("Sk8M8_API.Models.Client", "Client")
                        .WithMany("ClientMarkerStars")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sk8M8_API.Models.MapMarker", "MapMarker")
                        .WithMany("ClientMarkerStars")
                        .HasForeignKey("MapMarkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sk8M8_API.Models.MapMarker", b =>
                {
                    b.HasOne("Sk8M8_API.Models.Client", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("Sk8M8_API.Models.Media", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId");
                });

            modelBuilder.Entity("Sk8M8_API.Models.MarkerCategory", b =>
                {
                    b.HasOne("Sk8M8_API.Models.LocationType", "LocationType")
                        .WithMany()
                        .HasForeignKey("LocationTypeId");

                    b.HasOne("Sk8M8_API.Models.MapMarker", "MapMarker")
                        .WithMany()
                        .HasForeignKey("MapMarkerId");
                });

            modelBuilder.Entity("Sk8M8_API.Models.Media", b =>
                {
                    b.HasOne("Sk8M8_API.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("Sk8M8_API.Models.MediaRating", b =>
                {
                    b.HasOne("Sk8M8_API.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("Sk8M8_API.Models.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId");
                });

            modelBuilder.Entity("Sk8M8_API.Models.UserPermission", b =>
                {
                    b.HasOne("Sk8M8_API.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("Sk8M8_API.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId");
                });
#pragma warning restore 612, 618
        }
    }
}
